package geo

import (
	"math"
)

// Triangle represents a geometric triangle structure
type Triangle struct {
	Index         int32     // Unique identifier for the triangle
	Vertices      []Vertice // Three vertices that form the triangle
	EdgeIDs       []int32   // Unique IDs of the three edges, generated by server
	EdgeKeyString []string  // String keys of the three edges, generated by server
}

// IsCoordInside determines whether a point is inside the triangle.
// The triangle vertices are arranged clockwise. When calculating cross products
// between point p and triangle vectors, if all results are <= 0, the point
// is on the same side, indicating p is inside the triangle.
// Note: Collinear cases are also considered as being on the same side.
func (t *Triangle) IsCoordInside(p Coord) bool {
	pa := NewVector(p, t.Vertices[0].Coord)
	pb := NewVector(p, t.Vertices[1].Coord)
	pc := NewVector(p, t.Vertices[2].Coord)

	b1 := pa.Cross(&pb) >= 0
	b2 := pb.Cross(&pc) >= 0

	if b1 != b2 {
		return false
	}

	b3 := pc.Cross(&pa) >= 0
	return b2 == b3
}

// GetIndex returns the triangle's unique identifier
func (t *Triangle) GetIndex() int32 {
	return t.Index
}

// GetLocationToBorder determines the spatial relationship between triangle and border
func (t *Triangle) GetLocationToBorder(b *Border) LocationState {
	minX, minZ, maxX, maxZ := t.ToRect()
	return b.RectLocation(minX, minZ, maxX, maxZ)
}

// ToRect calculates the bounding rectangle of the triangle
func (t *Triangle) ToRect() (minX, minZ, maxX, maxZ int32) {
	minX = int32(math.MaxInt32)
	minZ = int32(math.MaxInt32)
	for _, v := range t.Vertices {
		minX = min(v.Coord.X, minX)
		minZ = min(v.Coord.Z, minZ)
		maxX = max(v.Coord.X, maxX)
		maxZ = max(v.Coord.Z, maxZ)
	}
	return minX, minZ, maxX, maxZ
}

// GetEdgeIDs returns the list of edge IDs for the triangle
func (t *Triangle) GetEdgeIDs() []int32 {
	return t.EdgeIDs
}

// GetEdgeMidCoords returns the midpoint coordinates of triangle edges
func (t *Triangle) GetEdgeMidCoords() []Coord {
	coords := make([]Coord, 3)
	coords[0] = CalMidCoord(t.Vertices[0].Coord, t.Vertices[1].Coord)
	coords[1] = CalMidCoord(t.Vertices[1].Coord, t.Vertices[2].Coord)
	coords[2] = CalMidCoord(t.Vertices[2].Coord, t.Vertices[0].Coord)
	return coords
}

// GetVertices returns the list of triangle vertices
func (t *Triangle) GetVertices() []Vertice {
	return t.Vertices
}

// GetVectors returns triangle vectors arranged counter-clockwise
func (t *Triangle) GetVectors() []Vector {
	vecs := make([]Vector, 3)
	vecs[0] = NewVectorByCoord(t.Vertices[0].Coord)
	vecs[1] = NewVectorByCoord(t.Vertices[2].Coord)
	vecs[2] = NewVectorByCoord(t.Vertices[1].Coord)
	return vecs
}

// GetNeighborEdgeNums counts the number of adjacent edges between two triangles
func (t *Triangle) GetNeighborEdgeNums(t2 *Triangle) int {
	var cnt int
	for i := range t.Vertices {
		for j := range t2.Vertices {
			if t.Vertices[i].Index == t2.Vertices[j].Index {
				cnt++
			}
		}
	}
	return cnt
}
